// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  username    String       @unique @default(dbgenerated("concat('user_', substr(md5(random()::text), 1, 8))")) //random default username like "user_a1b2c3d4"
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  posts       Posts[]
  reactions   Reactions[]
  matches     Matches[]    @relation("UserMatches")
  matchedWith Matches[]    @relation("MatchUserMatches")
  userDetails UserDetails?
}

model UserDetails {
  id            String          @id @default(uuid())
  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id])
  name          String
  bio           String
  department    String
  year          String
  image         String
  reading       String
  availability  String
  userInterests UserInterests[]
}

model Posts {
  id            String          @id @default(uuid())
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  postInterests PostInterests[]
  reactions     Reactions[]
}

model PostInterests {
  id         String    @id @default(uuid())
  postId     String
  interestId String
  post       Posts     @relation(fields: [postId], references: [id], onDelete: Cascade)
  interest   Interests @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@unique([postId, interestId])
  @@index([postId])
  @@index([interestId])
}

model Reactions {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Matches {
  id          String   @id @default(uuid())
  userId      String
  matchUserId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation("UserMatches", fields: [userId], references: [id])
  matchUser   User     @relation("MatchUserMatches", fields: [matchUserId], references: [id])
}

model Interests {
  id            String          @id @default(uuid())
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userInterests UserInterests[]
  postInterests PostInterests[]
}

model UserInterests {
  id            String @id @default(uuid())
  userDetailsId String
  interestId    String

  userDetails UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  interest    Interests   @relation(fields: [interestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userDetailsId, interestId])
  @@index([userDetailsId])
  @@index([interestId])
}
